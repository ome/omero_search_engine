A searchengine endpoint to accept complex query
API endpoint to search the annotation (key/value pair), the main difference between this endpoint and searchannotation is this one can be used to search different resources and return the images which satisfy the search conditions.
The container can be used as a resource instead of a project or screen if the user is not sure about the container type.
The query data has a similar format to the query for searchannotation.
Example:
   {
     "query_details": {
       "and_filters": [
         {
           "name": "Cell Line",
           "value": "hela",
           "operator": "equals",
           "resource": "image"
         },
         {
           "name": "name",
           "value": "idr0008-rohn-actinome/screenB",
           "operator": "equals",
           "resource": "project"
         }
       ],
       "or_filters": [

       ],
       "case_sensitive": false
     }
    }


The maximum number of returned results is 1000, so if the number of results is bigger than that, a `bookmark` should be added to the query to call the next page.
`bookmark` is returned with each page of results and should be used to call the next page.
Example of using bookmark:

  {
     "resource":"image",
     "query_details":{
        "and_filters":[
           {
              "name":"Cell Line",
              "operator":"equals",
              "query_type":"keyvalue",
              "resource":"image",
              "value":"hela"
           }
        ],
        "case_sensitive":false,
        "or_filters":[

        ]
     },
     "bookmark":
  [107448]

  }

There is a dict (`pagination`)  is returned with results.
It can be sent back with the query when calling the next page.
Then the server will update it and send it again along with the results to the client.
Example of using pagination:

{
"resource":"image",
"query_details":{
"and_filters":[
{
"name":"Cell Line",
"operator":"equals",
"query_type":"keyvalue",
"resource":"image",
"value":"hela"
}
],
"case_sensitive":false,
"or_filters":[

]
},
"pagination": {
      "current_page": 1,
      "next_page": 2,
      "page_records": [
        {
          "bookmark": [
            107448
          ],
          "page": 2
        }
      ],
      "total_pages": 1578
    }

}

---
tags:
 - Mixed Complex query

parameters:
  - name: data
    in: body
    required: true
    #examples:
    #  query: {
    #    "resource": "image",
    #    "query_details": {
    #      "and_filters": [
    #        {
    #          "name": "Gene Symbol",
    #          "value": "pdx1",
    #          "operator": "equals",
    #          "resource": "image"
    #        }
    #      ],
    #      "or_filters": [#

    #      ],
    #      "case_sensitive": false
    #    },
    #    "mode": "usesearchterms"
    #  }

responses:
  200:
    description: A JSON contains the results
    examples:
      results: []
